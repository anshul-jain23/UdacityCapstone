version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4
  
commands:
  install_awscli:
     description: install aws cli v2
     steps:
       - run:
            name: install aws cli v2
            command: |             
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o "awscliv2.zip"
                  unzip awscliv2.zip
                  sudo ./aws/install
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster -f kubernetes/stack.yml
            
jobs:
  run-lint:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv capstoneenv
            . capstoneenv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . capstoneenv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./capstoneenv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
  
  upload-docker:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and upload docker image to docker hub container
          command: |
            image="capstone"
            docker build --tag=$image .
            docker image ls
            
            dockerpath="$DOCKER_USERNAME/$image"
            docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
            docker tag "$image" "${dockerpath}:${CIRCLE_WORKFLOW_ID:0:7}"
            docker tag "$image" "${dockerpath}:latest"
            docker push "${dockerpath}:${CIRCLE_WORKFLOW_ID:0:7}"
            
            docker push "${dockerpath}:latest"
            
  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependancies
          command: |
            yum install -y tar gzip
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: create new cluster
          command: |            
            kubeRegion="us-east-1"
            image="capstone"
            dockerpath="$DOCKER_USERNAME/$image"
            
            if eksctl create cluster --config-file=kubernetes/stack.yml
            then
              echo "creating new Stack"
              aws eks update-kubeconfig --name $image --region $kubeRegion              
              kubectl apply -f kubernetes/deploy.yml
              kubectl apply -f kubernetes/service.yml

              kubectl get deployments
              kubectl get services
            else
              aws eks update-kubeconfig --name $image --region $kubeRegion
              echo "update existing Stack"
              kubectl get deployments
              kubectl get services
              kubectl get deploy,rs,svc,pods
              kubectl set image deployment/$image capstone-app="$dockerpath:${CIRCLE_WORKFLOW_ID:0:7}"
              kubectl get deployments
              kubectl get rs
            fi
      
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install dependancies
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Test load balancer
          command: |
            aws eks update-kubeconfig --name capstone --region us-east-1
            export DNS=$(aws elb describe-load-balancers --query LoadBalancerDescriptions[*].DNSName --output text)
            export URL="http://${DNS}"
            echo "URL = ${URL}"
            if curl -s "${URL}" | grep "Udacity"
            then
              echo "Capstone Deployment Successful"
            else
              kubectl rollout undo deployments/capstone
            fi

workflows:
  default:
    jobs:
      - run-lint
      - upload-docker:
          requires: [run-lint]
      - deploy:
          requires: [upload-docker]
      - smoke-test:
          requires: [deploy]